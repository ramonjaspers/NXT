<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="class_state" kind="class" language="C++" prot="public">
    <compoundname>State</compoundname>
    <includes refid="state_8h" local="no">state.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_state_1a2c157e70b0d158e0a9460dbb332c7c01" prot="private" static="no" mutable="no">
        <type><ref refid="class_init" kindref="compound">Init</ref></type>
        <definition>Init State::init</definition>
        <argsstring></argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="11" column="1" bodyfile="state.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_state_1a1b411401c4bf5691317227067545823d" prot="private" static="no" mutable="no">
        <type><ref refid="class_log" kindref="compound">Log</ref></type>
        <definition>Log State::log</definition>
        <argsstring></argsstring>
        <name>log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="12" column="1" bodyfile="state.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_state_1a32c7a0c466fe37889b4053d83046b63e" prot="private" static="no" mutable="no">
        <type><ref refid="class_motion" kindref="compound">Motion</ref></type>
        <definition>Motion State::motion</definition>
        <argsstring></argsstring>
        <name>motion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="13" column="1" bodyfile="state.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_state_1adee9d7ef7c6a6946eaa5db31b7959ed3" prot="private" static="no" mutable="no">
        <type><ref refid="class_sensor" kindref="compound">Sensor</ref></type>
        <definition>Sensor State::sensor</definition>
        <argsstring></argsstring>
        <name>sensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="14" column="1" bodyfile="state.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_state_1ab91bb1dd5aa6260ab2a456581daf9ec2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>State::State</definition>
        <argsstring>()</argsstring>
        <name>State</name>
        <briefdescription>
<para>The different types of states are. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="17" column="1" bodyfile="state.cpp" bodystart="9" bodyend="17"/>
        <references refid="class_init_1a2f0137392b84da9c02d9c4d892e44534" compoundref="init_8cpp" startline="30" endline="32">Init::get_motion</references>
        <references refid="class_init_1a8d5597fb9e9bfb192a235cdee32ede2d" compoundref="init_8cpp" startline="22" endline="24">Init::get_sensor</references>
      </memberdef>
      <memberdef kind="function" id="class_state_1afab438d92b90dc18d194dbd9c9c8bab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>State::~State</definition>
        <argsstring>()</argsstring>
        <name>~State</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="18" column="1" bodyfile="state.cpp" bodystart="135" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_state_1aed3bf8334ee32e0cccba11fc2dc42b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void State::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When the system is proceeding as expected </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="19" column="1" bodyfile="state.cpp" bodystart="38" bodyend="44"/>
        <references refid="class_sensor_1add2279da6d407ed7678064ab1fe7d02d" compoundref="sensor_8cpp" startline="71" endline="84">Sensor::both_white</references>
        <references refid="class_sensor_1a4f797e3f6a549cfdefab639eb6a86787" compoundref="sensor_8cpp" startline="37" endline="39">Sensor::object_near</references>
        <references refid="class_state_1ae03eae00675106f8b6b9481c4b0e50dc" compoundref="state_8cpp" startline="49" endline="55">object_or_turn</references>
        <referencedby refid="class_state_1a975afaa8e6091654888d7ed58b8c29c1" compoundref="state_8cpp" startline="61" endline="112">obstacle_avoid</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_state_1a975afaa8e6091654888d7ed58b8c29c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool State::obstacle_avoid</definition>
        <argsstring>()</argsstring>
        <name>obstacle_avoid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function that will try to run around an obstacle <simplesect kind="return"><para>if the obstacle has been avoided </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
<para>45 naar graden rechts</para><para>50 graden naar links </para>        </inbodydescription>
        <location file="state.h" line="20" column="1" bodyfile="state.cpp" bodystart="61" bodyend="112"/>
        <references refid="class_state_1ae5ed95e28512e11f7cc41c603ca58ad5" compoundref="state_8cpp" startline="115" endline="128">turn</references>
        <references refid="class_state_1aed3bf8334ee32e0cccba11fc2dc42b68" compoundref="state_8cpp" startline="38" endline="44">clear</references>
        <referencedby refid="class_state_1ae03eae00675106f8b6b9481c4b0e50dc" compoundref="state_8cpp" startline="49" endline="55">object_or_turn</referencedby>
        <referencedby refid="class_state_1ae5ed95e28512e11f7cc41c603ca58ad5" compoundref="state_8cpp" startline="115" endline="128">turn</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_state_1ae5ed95e28512e11f7cc41c603ca58ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void State::turn</definition>
        <argsstring>()</argsstring>
        <name>turn</name>
        <briefdescription>
<para>Driving slower and taking a turn. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para><ref refid="class_i_r" kindref="compound">IR</ref> Left RGB Right </para>        </inbodydescription>
        <location file="state.h" line="21" column="1" bodyfile="state.cpp" bodystart="115" bodyend="128"/>
        <references refid="class_sensor_1add2279da6d407ed7678064ab1fe7d02d" compoundref="sensor_8cpp" startline="71" endline="84">Sensor::both_white</references>
        <references refid="class_sensor_1a4f797e3f6a549cfdefab639eb6a86787" compoundref="sensor_8cpp" startline="37" endline="39">Sensor::object_near</references>
        <references refid="class_state_1a975afaa8e6091654888d7ed58b8c29c1" compoundref="state_8cpp" startline="61" endline="112">obstacle_avoid</references>
        <references refid="class_sensor_1a03b8f6886c672badadfeef89d069e1ea" compoundref="sensor_8cpp" startline="108" endline="110">Sensor::IR_black_RGB_white</references>
        <references refid="class_motion_1af922ccbd27054420dd1ff679d48f588d" compoundref="motion_8cpp" startline="39" endline="58">Motion::turn</references>
        <references refid="class_sensor_1aa75ec0ed5bd2782f726f7e01796b2285" compoundref="sensor_8cpp" startline="116" endline="118">Sensor::RGB_black_IR_white</references>
        <referencedby refid="class_state_1ae03eae00675106f8b6b9481c4b0e50dc" compoundref="state_8cpp" startline="49" endline="55">object_or_turn</referencedby>
        <referencedby refid="class_state_1a975afaa8e6091654888d7ed58b8c29c1" compoundref="state_8cpp" startline="61" endline="112">obstacle_avoid</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_state_1a4e9d67c11218113bfa282ddccfd6326a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool State::grid_travel</definition>
        <argsstring>()</argsstring>
        <name>grid_travel</name>
        <briefdescription>
<para>driving through a grid storing the directions driven. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="22" column="1" bodyfile="state.cpp" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="class_state_1ae03eae00675106f8b6b9481c4b0e50dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void State::object_or_turn</definition>
        <argsstring>()</argsstring>
        <name>object_or_turn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decides whether or not the turns should be made or if the obstacle avoid run needs to be made </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="23" column="1" bodyfile="state.cpp" bodystart="49" bodyend="55"/>
        <references refid="class_sensor_1add2279da6d407ed7678064ab1fe7d02d" compoundref="sensor_8cpp" startline="71" endline="84">Sensor::both_white</references>
        <references refid="class_state_1a975afaa8e6091654888d7ed58b8c29c1" compoundref="state_8cpp" startline="61" endline="112">obstacle_avoid</references>
        <references refid="class_sensor_1a4f797e3f6a549cfdefab639eb6a86787" compoundref="sensor_8cpp" startline="37" endline="39">Sensor::object_near</references>
        <references refid="class_state_1ae5ed95e28512e11f7cc41c603ca58ad5" compoundref="state_8cpp" startline="115" endline="128">turn</references>
        <referencedby refid="class_state_1aed3bf8334ee32e0cccba11fc2dc42b68" compoundref="state_8cpp" startline="38" endline="44">clear</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_state_1adcabc610335b5bd9efdf7f908de7dacb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_motion" kindref="compound">Motion</ref></type>
        <definition>Motion State::getMotion</definition>
        <argsstring>()</argsstring>
        <name>getMotion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>motion object that contains the control of the servo&apos;s </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="24" column="1" bodyfile="state.cpp" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="class_state_1a9195abef447816fe4830f875f0b1dda2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_sensor" kindref="compound">Sensor</ref></type>
        <definition>Sensor State::getSensor</definition>
        <argsstring>()</argsstring>
        <name>getSensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>sensor object that contains the control of the RGB, <ref refid="class_i_r" kindref="compound">IR</ref> and <ref refid="class_ultrasonic" kindref="compound">Ultrasonic</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="state.h" line="25" column="1" bodyfile="state.cpp" bodystart="31" bodyend="33"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="state.h" line="9" column="1" bodyfile="state.h" bodystart="9" bodyend="26"/>
    <listofallmembers>
      <member refid="class_state_1aed3bf8334ee32e0cccba11fc2dc42b68" prot="public" virt="non-virtual"><scope>State</scope><name>clear</name></member>
      <member refid="class_state_1adcabc610335b5bd9efdf7f908de7dacb" prot="public" virt="non-virtual"><scope>State</scope><name>getMotion</name></member>
      <member refid="class_state_1a9195abef447816fe4830f875f0b1dda2" prot="public" virt="non-virtual"><scope>State</scope><name>getSensor</name></member>
      <member refid="class_state_1a4e9d67c11218113bfa282ddccfd6326a" prot="public" virt="non-virtual"><scope>State</scope><name>grid_travel</name></member>
      <member refid="class_state_1a2c157e70b0d158e0a9460dbb332c7c01" prot="private" virt="non-virtual"><scope>State</scope><name>init</name></member>
      <member refid="class_state_1a1b411401c4bf5691317227067545823d" prot="private" virt="non-virtual"><scope>State</scope><name>log</name></member>
      <member refid="class_state_1a32c7a0c466fe37889b4053d83046b63e" prot="private" virt="non-virtual"><scope>State</scope><name>motion</name></member>
      <member refid="class_state_1ae03eae00675106f8b6b9481c4b0e50dc" prot="public" virt="non-virtual"><scope>State</scope><name>object_or_turn</name></member>
      <member refid="class_state_1a975afaa8e6091654888d7ed58b8c29c1" prot="public" virt="non-virtual"><scope>State</scope><name>obstacle_avoid</name></member>
      <member refid="class_state_1adee9d7ef7c6a6946eaa5db31b7959ed3" prot="private" virt="non-virtual"><scope>State</scope><name>sensor</name></member>
      <member refid="class_state_1ab91bb1dd5aa6260ab2a456581daf9ec2" prot="public" virt="non-virtual"><scope>State</scope><name>State</name></member>
      <member refid="class_state_1ae5ed95e28512e11f7cc41c603ca58ad5" prot="public" virt="non-virtual"><scope>State</scope><name>turn</name></member>
      <member refid="class_state_1afab438d92b90dc18d194dbd9c9c8bab3" prot="public" virt="non-virtual"><scope>State</scope><name>~State</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
